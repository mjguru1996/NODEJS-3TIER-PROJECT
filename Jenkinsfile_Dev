pipeline {
    agent any
    
    tools {    
        nodejs 'nodejs'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages{
        stage('GIT Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mjguru1996/Shack.git'
            }
        }
        stage('Frontend Scan') {
            steps {
                echo 'Scanning frontend...'
                dir('client') {
                sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        stage('Backend Scan') {
            steps {
                echo 'Scanning backend...'
                dir('api') {
                sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        stage('Gitleaks Scan') {
            steps {
                echo 'Running Gitleaks scan...'
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
    }
        stage('Sonarqube Analysis') {
            steps {
                echo 'Running Sonarqube analysis...'
                withSonarQubeEnv('sonar') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NODEJS-Project \
                    -Dsonar.projectKey=NODEJS-Project'''
                }
            }
        }
        stage('Quality Gate Validation') {
            steps {
                echo 'Running Sonarqube quality gate validation...'
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
                }
            }
        stage('Trivy Scan') {
            steps {
                echo 'Running Trivy scan...'
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        stage('Docker Build Backend') {
            steps {
                echo 'Building Docker image for backend...'
                script{
                    // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('api') {
                            sh 'docker build -t guruprasadkannan/backend:latest'
                            sh 'trivy image --format table -o backend-image-report.html guruprasadkannan/backend:latest'
                            sh 'docker push guruprasadkannan/backend:latest'                           
                    }
                    }
                }
            }
        }
        stage('Docker Build Frontend') {
            steps {
                echo 'Building Docker image for frontend...'
                script{
                    // This step should not normally be used in your script. Consult the inline help for details.
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('client') {
                            sh 'docker build -t guruprasadkannan/frontend:latest'
                            sh 'trivy image --format table -o frontend-image-report.html guruprasadkannan/frontend:latest'
                            sh 'docker push guruprasadkannan/frontend:latest'                          
                    }
                }
                }
            }
        }
        stage('Docker Deployment via Compose') {
            steps {
                script{
                    sh 'docker-compose up -d'
                }
            }
    }
}

